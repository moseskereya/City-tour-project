{"version":3,"sources":["Components/NavBar.js","Components/SingleTour.js","Data.js","Components/Tours.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","Single","props","showinfoChange","setState","showInfo","state","this","tour","name","info","img","city","src","alt","onClick","Component","tourData","id","Tour","tours","map","key","App","Tours","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAiBeA,G,YAfA,WACX,OACI,6BACC,yBAAKC,UAAU,OACX,0CACA,4BACI,oCACA,qCACA,wBAAIA,UAAU,UAAd,e,mCCkCFC,G,iBAzCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,eAAiB,WACb,EAAKC,SAAS,CACVC,UAAU,EAAKC,MAAMD,YARzB,EAAKC,MAAQ,CACTD,UAAS,GAHE,E,sEAaT,IAAD,EAC6BE,KAAKL,MAAMM,KAAtCC,EADF,EACEA,KAAOC,EADT,EACSA,KAAMC,EADf,EACeA,IAAMC,EADrB,EACqBA,KAC1B,OACI,0BAAMZ,UAAU,SACZ,6BAASA,UAAU,cACnB,yBAAKA,UAAU,aACX,yBAAKa,IAAKF,EAAKG,IAAI,KACnB,0BAAMd,UAAU,SACZ,uBAAGA,UAAU,yBAGrB,yBAAKA,UAAU,aACX,4BAAKY,GACL,4BAAKH,GACP,4BACKF,KAAKD,MAAMD,UAAa,2BAAIK,GADjC,OAES,GACL,0BAAMV,UAAU,eAAee,QAASR,KAAKJ,gBAC7C,uBAAGH,UAAU,8B,GAhCdgB,cCFRC,EAAW,CACpB,CACGC,GAAI,EACJN,KAAK,SACLH,KAAK,SACLE,IAAI,yGACJD,KAAK,yPAIR,CACIQ,GAAI,EACJN,KAAK,SACLH,KAAK,UACLE,IAAI,yGACJD,KAAK,yPAET,CACCQ,GAAG,EACHN,KAAK,QACLH,KAAK,QACLE,IAAI,4FACJD,KAAK,yPAEN,CACIQ,GAAI,EACJN,KAAK,UACLH,KAAK,UACLE,IAAI,2GACJD,KAAK,0PCFES,E,YAtBX,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACTc,MAAMH,GAHK,E,sEAMT,IACAG,EAASb,KAAKD,MAAdc,MACN,OACI,iCAEKA,EAAMC,KAAK,SAAAb,GACP,OACD,kBAAC,EAAD,CAAQc,IAAKd,EAAKU,GAAIV,KAAMA,Y,GAd7BQ,a,MCYJO,MAXf,WACE,OACE,yBAAKvB,UAAU,OACX,kBAAC,EAAD,MACA,0BAAMA,UAAU,QAChB,kBAACwB,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.67222713.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Nav.css\"\r\nconst NavBar = () => {\r\n    return (\r\n        <div>\r\n         <nav className=\"Nav\">\r\n             <div>CITY TOUR</div>\r\n             <ul>\r\n                 <li>Home</li>\r\n                 <li>About</li>\r\n                 <li className=\"active\">Cities</li>\r\n             </ul>\r\n         </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React, { Component } from 'react';\r\nimport \"./Tour.css\"\r\nclass Single extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            showInfo:false\r\n         }\r\n   \r\n    }\r\n\r\n    showinfoChange = () =>{\r\n        this.setState({\r\n            showInfo:!this.state.showInfo\r\n        })\r\n    }\r\n    render() { \r\n        const {name , info, img , city} = this.props.tour\r\n        return ( \r\n            <main className=\"App-1\">\r\n                <article className=\"tour tour1\">\r\n                <div className=\"container\">\r\n                    <img src={img} alt=\"\"/>\r\n                    <span className=\"close\">\r\n                        <i className=\"fa fa-window-close\" ></i>\r\n                    </span>\r\n                </div>\r\n                <div className=\"tour-info\">\r\n                    <h3>{city}</h3>\r\n                    <h4>{name}</h4>\r\n                  <h5> \r\n                      {this.state.showInfo &&  <p>{info}</p>}\r\n                      info{''} \r\n                      <span className=\"view-details\" onClick={this.showinfoChange}>\r\n                      <i className=\"fa fa-angle-down\"></i>\r\n                      </span>\r\n                  </h5>\r\n                </div>\r\n            </article>\r\n            </main>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Single;","export const tourData = [\r\n    {\r\n       id: 1,\r\n       city:\"Milano\",\r\n       name:\"Milani\",\r\n       img:\"https://images.pexels.com/photos/597909/pexels-photo-597909.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\",\r\n       info:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\r\n\r\n    },\r\n\r\n    {\r\n        id: 2,\r\n        city:\"London\",\r\n        name:\"England\",\r\n        img:\"https://images.pexels.com/photos/575362/pexels-photo-575362.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\",\r\n        info:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\r\n    },  \r\n    {\r\n     id:3,\r\n     city:\"Paris\",\r\n     name:\"Paris\",\r\n     img:\"https://t4.ftcdn.net/jpg/02/71/86/91/240_F_271869174_e1hMDJZnJixj5nsBtnZ5wuxAXebk7vIb.jpg\",\r\n     info:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\r\n    }, \r\n    {\r\n        id: 4,\r\n        city:\"Florida\",\r\n        name:\"Florida\",\r\n        img:\"https://images.pexels.com/photos/3065260/pexels-photo-3065260.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\",\r\n        info:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\r\n    }\r\n]","import React, { Component } from 'react';\r\nimport \"./Tour.css\"\r\nimport Single from \"./SingleTour\"\r\nimport { tourData } from \"../Data\"\r\nclass Tour extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            tours:tourData\r\n         }\r\n    }\r\n    render() { \r\n       const {tours} = this.state\r\n        return ( \r\n            <section>\r\n             {\r\n                 tours.map( tour => {\r\n                     return(\r\n                    <Single key={tour.id} tour={tour} />\r\n                     )\r\n                 })\r\n             }\r\n            </section>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Tour;","import React from 'react';\nimport Nav from \"./Components/NavBar\"\nimport Tours from \"./Components/Tours\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Nav/>\n        <main className=\"main\"> \n        <Tours/> \n        </main>\n    </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}